// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"github.com/ljinf/im_server_standalone/internal/handler"
	"github.com/ljinf/im_server_standalone/internal/repository"
	"github.com/ljinf/im_server_standalone/internal/server"
	"github.com/ljinf/im_server_standalone/internal/service"
	"github.com/ljinf/im_server_standalone/internal/ws"
	"github.com/ljinf/im_server_standalone/pkg/app"
	"github.com/ljinf/im_server_standalone/pkg/jwt"
	"github.com/ljinf/im_server_standalone/pkg/log"
	"github.com/ljinf/im_server_standalone/pkg/server/http"
	"github.com/ljinf/im_server_standalone/pkg/sid"
	"github.com/panjf2000/ants"
	"github.com/spf13/viper"
)

// Injectors from wire.go:

func NewWire(viperViper *viper.Viper, logger *log.Logger, pool *ants.Pool) (*app.App, func(), error) {
	jwtJWT := jwt.NewJwt(viperViper)
	handlerHandler := handler.NewHandler(logger)
	db := repository.NewDB(viperViper, logger)
	client := repository.NewRedis(viperViper)
	repositoryRepository := repository.NewRepository(viperViper, logger, db, client)
	transaction := repository.NewTransaction(repositoryRepository)
	sidSid := sid.NewSid()
	serviceService := service.NewService(transaction, logger, sidSid, jwtJWT)
	userRepository := repository.NewUserRepository(repositoryRepository)
	userService := service.NewUserService(serviceService, userRepository)
	userHandler := handler.NewUserHandler(handlerHandler, userService)
	socketWsServer := ws.NewWsServer(viperViper, logger)
	chatRepository := repository.NewChatRepository(repositoryRepository)
	chatService := service.NewChatService(serviceService, chatRepository)
	websocketService := service.NewWebsocketService(serviceService, socketWsServer, chatService, pool)
	webSocketHandler := handler.NewWebSocketHandler(handlerHandler, websocketService)
	relationshipRepository := repository.NewRelationshipRepository(repositoryRepository)
	relationshipService := service.NewRelationshipService(serviceService, relationshipRepository)
	relationshipHandler := handler.NewRelationshipHandler(handlerHandler, relationshipService, chatService)
	chatHandler := handler.NewChatHandler(handlerHandler, chatService, websocketService)
	httpServer := server.NewHTTPServer(logger, viperViper, jwtJWT, userHandler, webSocketHandler, relationshipHandler, chatHandler)
	job := server.NewJob(logger)
	appApp := newApp(httpServer, job)
	return appApp, func() {
	}, nil
}

// wire.go:

var repositorySet = wire.NewSet(repository.NewDB, repository.NewRedis, repository.NewRepository, repository.NewTransaction, repository.NewUserRepository, repository.NewRelationshipRepository, repository.NewChatRepository)

var serviceSet = wire.NewSet(service.NewService, service.NewUserService, service.NewWebsocketService, service.NewRelationshipService, service.NewChatService)

var handlerSet = wire.NewSet(handler.NewHandler, handler.NewUserHandler, handler.NewWebSocketHandler, handler.NewRelationshipHandler, handler.NewChatHandler)

var serverSet = wire.NewSet(server.NewHTTPServer, server.NewJob, ws.NewWsServer)

// build App
func newApp(
	httpServer *http.Server,
	job *server.Job,

) *app.App {
	return app.NewApp(app.WithServer(httpServer, job), app.WithName("demo-server"))
}
